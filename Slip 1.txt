Slip 1 

Q1. Write an AngularJS script for addition of two numbers using ng-init, ng-model &
ng-bind. And also demonstrate ng-show, ng-disabled, ng-click directives on button
component.
Ans:
nano index.html

<!DOCTYPE html>
<html lang="en" ng-app>
<head>
    <meta charset="UTF-8">
    <title>Addition with AngularJS</title>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
</head>
<body ng-init="num1=0; num2=0; result=0; showResult=false">

    <div style="margin: 20px;">
        <h2>Add Two Numbers</h2>

        <!-- Input for Number 1 -->
        <label>Number 1:</label>
        <input type="number" ng-model="num1">

        <!-- Input for Number 2 -->
        <label>Number 2:</label>
        <input type="number" ng-model="num2">

        <!-- Button to calculate the addition -->
        <button 
            ng-click="result = num1 + num2; showResult=true"
            ng-disabled="num1 === '' || num2 === ''"
        >
            Add
        </button>

        <!-- Show the result if showResult is true -->
        <p ng-show="showResult">Result: <span ng-bind="result"></span></p>

    </div>
</body>
</html>


Q.2) Create a Node.js application that reads data from multiple files asynchronously
using promises and async/await.
Ans 
mkdir file-reader

cd file-reader

npm init -y

file1.txt

This is the content of file 1.

file2.txt

This is the content of file 2.

file3.txt

This is the content of file 3.

nano app.js

const fs = require('fs').promises;  // Using the 'promises' API for async operations
const path = require('path');
const readFile = async (filePath) => {
  try {
    const data = await fs.readFile(filePath, 'utf8');
    return data;
  } catch (err) {
    console.error(`Error reading file ${filePath}:`, err);
  }
};
const readMultipleFiles = async () => {
  try {
 filePaths = [
      path.join(__dirname, 'file1.txt'),
      path.join(__dirname, 'file2.txt'),
      path.join(__dirname, 'file3.txt')
    ];
    const fileContents = await Promise.all(filePaths.map(readFile));
    fileContents.forEach((content, index) => {
      console.log(`Content of file${index + 1}: \n`, content);
    });
  } catch (err) {
    console.error('Error reading multiple files:', err);
  }
};
readMultipleFiles();


run cmd
node app.js
